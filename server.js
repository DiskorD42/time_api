 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var moment = require('moment');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
    .get(function(req, res) {
      
		    res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/:dateString')
    .get(function(req, res) {
      console.log(req.dateString);
      
      if(moment(req.dateString, 'MMMM DD, Y').isValid()|| moment(req.dateString) > 0){
             
         var date_props= {
           unixtime:moment(req.dateString).unix(), 
           natural:moment(req.dateString).format('MMMM DD, Y')
         };
        
      }else{
        
        var date_props= {
           unixtime:null, 
           natural: null
         };
      }           
		   res.end(JSON.stringify(date_props));
    })


function timestamp_or_date(query_obj){
  var date = new Date(query_obj);
  //check if it is a object Date
  if (Object.prototype.toString.call(date) ==="[object Date]"){
    //check if it is a valid Date
    console.log("its a date!");
    return true;
    }else{
    return false;
  }
  
}

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

